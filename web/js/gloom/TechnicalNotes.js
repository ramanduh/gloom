// Generated by CoffeeScript 2.0.0-alpha1

/*
 *  TODO : Rename this class as XMLExtraInfo as it is used to get all
 *  extra information in a XML file (string, fret, lyric)
 *  A technical is 
 *  Initialisation of technical (string + fret) of the song
 *  Will Read a MusicXML file to get these info
 *
 */

(function() {
  var TechnicalNotes;

  TechnicalNotes = class TechnicalNotes {
    constructor(fretnote) {
      this.fretnote = fretnote;
      this.notes_on = [];
      this.notes_off = [];
    }

    init(filename, callback) {
      var xmlhttp;
      xmlhttp = new XMLHttpRequest();
      xmlhttp.onload = () => {
        var fret_elements, i, j, k, l, node_name, ref, ref1, string_elements, technical, technical_elements, technical_nodes, xmlDoc;
        xmlDoc = new DOMParser().parseFromString(xmlhttp.responseText, 'text/xml');
        technical_elements = xmlDoc.getElementsByTagName("technical");
        fret_elements = xmlDoc.getElementsByTagName("fret");
        string_elements = xmlDoc.getElementsByTagName("string");
        for (i = k = 0, ref = technical_elements.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
          technical = {};
          technical_nodes = technical_elements[i].childNodes;
          for (j = l = 0, ref1 = technical_nodes.length - 1; 0 <= ref1 ? l <= ref1 : l >= ref1; j = 0 <= ref1 ? ++l : --l) {
            node_name = technical_nodes[j].nodeName;
            switch (node_name) {
              case "fret":
                technical.fret = technical_nodes[j].textContent.toString();
                break;
              case "string":
                technical.string = technical_nodes[j].textContent.toString();
                break;
              case "lyric":
                technical.lyric = technical_nodes[j].textContent.toString();
                break;
            }
          }
          this.notes_on.push(technical);
        }
        this.notes_off = this.notes_on.slice();
        return typeof callback === "function" ? callback() : void 0;
      };
      xmlhttp.open("GET", filename, true);
      return xmlhttp.send();
    }

    getNextNoteOn(note) {
      if (note === this.fretnote.technicalNote(this.notes_on[0])) {
        return this.notes_on.shift();
      } else {
        console.log("ERROR #T1");
        return 1;
      }
    }

    getNextNoteOff(note) {
      var i, k, n, ref;
      for (i = k = 0, ref = this.notes_off.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        if (note === this.fretnote.technicalNote(this.notes_off[i])) {
          n = this.notes_off[i];
          this.notes_off.splice(i, 1);
          return n;
        }
      }
    }

  };

  this.TechnicalNotes = TechnicalNotes;

}).call(this);
