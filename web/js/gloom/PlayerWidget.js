// Generated by CoffeeScript 2.0.0-alpha1
(function() {
  var PlayerWidget,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PlayerWidget = class PlayerWidget {
    constructor(container) {
      this.displayProgress = bind(this.displayProgress, this);
      this.onstop = bind(this.onstop, this);
      this.onresume = bind(this.onresume, this);
      this.onpause = bind(this.onpause, this);
      this.onplay = bind(this.onplay, this);
      this.$container = $(container);
      this.$controlsContainer = $('.player-controls', this.$container);
      this.$progressContainer = $('.player-progress-container', this.$container);
      this.$progressBar = $('.player-progress-bar', this.$container);
      this.$progressText = $('.player-progress-text', this.$container);
      this.$playBtn = $('.player-play', this.$container);
      this.$stopBtn = $('.player-stop', this.$container);
      this.$pauseBtn = $('.player-pause', this.$container);
      this.$stopBtn.click(() => {
        return this.stop();
      });
      this.$pauseBtn.click(() => {
        return this.pause();
      });
      this.$playBtn.click(() => {
        MIDI.WebAudio.getContext().resume();
        if (this.current === 'paused') {
          return this.resume();
        } else {
          return this.play();
        }
      });
      this.$progressContainer.click((event) => {
        var progress;
        progress = (event.clientX - this.$progressContainer.offset().left) / this.$progressContainer.width();
        return typeof this.progressCallback === "function" ? this.progressCallback(progress) : void 0;
      });
    }

    on(eventName, callback) {
      return this[`${eventName}Callback`] = callback;
    }

    onplay() {
      this.$playBtn.hide();
      this.$pauseBtn.show();
      return typeof this.playCallback === "function" ? this.playCallback() : void 0;
    }

    onpause() {
      this.$pauseBtn.hide();
      this.$playBtn.show();
      return typeof this.pauseCallback === "function" ? this.pauseCallback() : void 0;
    }

    onresume() {
      this.$playBtn.hide();
      this.$pauseBtn.show();
      return typeof this.resumeCallback === "function" ? this.resumeCallback() : void 0;
    }

    onstop() {
      this.$pauseBtn.hide();
      this.$playBtn.show();
      return typeof this.stopCallback === "function" ? this.stopCallback() : void 0;
    }

    displayProgress(event) {
      var curTime, current, progress, totTime, total;
      current = event.current, total = event.total;
      current = Math.min(current, total);
      progress = current / total;
      this.$progressBar.width(this.$progressContainer.width() * progress);
      curTime = this._formatTime(current);
      totTime = this._formatTime(total);
      return this.$progressText.text(`${curTime} / ${totTime}`);
    }

    _formatTime(time) {
      var minutes, seconds;
      minutes = time / 60 >> 0;
      seconds = String(time - (minutes * 60) >> 0);
      if (seconds.length === 1) {
        seconds = `0${seconds}`;
      }
      return `${minutes}:${seconds}`;
    }

  };

  StateMachine.create({
    target: PlayerWidget.prototype,
    events: [
      {
        name: 'init',
        from: 'none',
        to: 'ready'
      }, {
        name: 'play',
        from: 'ready',
        to: 'playing'
      }, {
        name: 'pause',
        from: 'playing',
        to: 'paused'
      }, {
        name: 'resume',
        from: 'paused',
        to: 'playing'
      }, {
        name: 'stop',
        from: '*',
        to: 'ready'
      }
    ]
  });

  this.PlayerWidget = PlayerWidget;

}).call(this);
