// Generated by CoffeeScript 2.0.0-alpha1
(function() {
  var FretBoard;

  FretBoard = class FretBoard {
    constructor(container, fretnote) {
      var i, string;
      this.fretnote = fretnote;
      this.model = Snap(container);
      this.note_elm = [];
      for (string = i = 1; i <= 6; string = ++i) {
        this.note_elm[string] = [];
      }
    }

    init(callback) {
      Snap.load("./img/fretboard.svg", (loadedFragment) => {
        var fret, i, id_elem, j, ref, string;
        for (string = i = 1; i <= 6; string = ++i) {
          for (fret = j = 0, ref = this.fretnote.nb_frets; 0 <= ref ? j <= ref : j >= ref; fret = 0 <= ref ? ++j : --j) {
            id_elem = "#f" + string + "-" + fret;
            this.note_elm[string][fret] = loadedFragment.select(id_elem);
          }
        }
        return this.model.append(loadedFragment);
      });
      return typeof callback === "function" ? callback() : void 0;
    }

    press(note) {
      var fret, string;
      string = note.string, fret = note.fret;
      this.note_elm[string][fret].attr({
        stroke: '#000',
        display: ''
      });
      return this.note_elm[string][fret].animate({
        fill: '#FF9800'
      }, 300);
    }

    release(note) {
      var fret, string;
      string = note.string, fret = note.fret;
      return this.note_elm[string][fret].attr({
        display: 'none',
        fill: 'red'
      });
    }

    release_all() {
      var fret, i, results, string;
      results = [];
      for (string = i = 1; i <= 6; string = ++i) {
        results.push((function() {
          var j, ref, results1;
          results1 = [];
          for (fret = j = 0, ref = this.fretnote.nb_frets; 0 <= ref ? j <= ref : j >= ref; fret = 0 <= ref ? ++j : --j) {
            results1.push(this.release({
              string: string,
              fret: fret
            }));
          }
          return results1;
        }).call(this));
      }
      return results;
    }

  };

  this.FretBoard = FretBoard;

}).call(this);
