// Generated by CoffeeScript 2.0.0-alpha1
(function() {
  var Gloom,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Gloom = class Gloom {
    constructor() {
      this.setProgressFrom = bind(this.setProgressFrom, this);
      this.setProgress = bind(this.setProgress, this);
      this.setCurrentTime = bind(this.setCurrentTime, this);
      this.getEndTime = bind(this.getEndTime, this);
      this.pause = bind(this.pause, this);
      this.stop = bind(this.stop, this);
      this.resume = bind(this.resume, this);
      this.start = bind(this.start, this);
      this.fretnote = new FretNote(21, 0);
      this.fretboard = new FretBoard("#fretboard", this.fretnote);
      this.tablature = new Tablature("#svg");
      this.technical = new TechnicalNotes(this.fretnote);
      this.player = MIDI.Player;
      this.player.addListener((data) => {
        var NOTE_OFF, NOTE_ON, message, technical;
        NOTE_OFF = 128;
        NOTE_ON = 144;
        technical = data.technical, message = data.message;
        if (message === NOTE_ON) {
          return this.fretboard.press(technical);
        } else if (message === NOTE_OFF) {
          if (technical != null) {
            return this.fretboard.release(technical);
          }
        }
      });
      this.player.setAnimation((data) => {
        var end, now;
        now = data.now, end = data.end;
        if (now >= end) {
          setTimeout(this._stop_player, 1000);
        }
        this.tablature.update(now * 1000);
        return typeof this.onprogress === "function" ? this.onprogress({
          current: now,
          total: end
        }) : void 0;
      });
    }

    _stop_player() {
      return window.player.stop();
    }

    initMidi(instrument, callback) {
      return MIDI.loadPlugin({
        instrument: instrument,
        onsuccess: function() {
          if (instrument === "acoustic_guitar_steel") {
            MIDI.programChange(0, 25);
          } else if (instrument === "acoustic_guitar_nylon") {
            MIDI.programChange(0, 24);
          }
          MIDI.channels[9].mute = true;
          return typeof callback === "function" ? callback() : void 0;
        }
      });
    }

    loadMidiFile(midiFile, callback) {
      this.player.BPM = 90;
      return this.technical.init("./songs/notes.Crying_in_the_rain.xml", () => {
        return this.player.loadFile(midiFile, () => {
          return this.tablature.setMidiData(this.player.data, callback);
        });
      });
    }

    start() {
      this.player.start();
      return this.playing = true;
    }

    resume() {
      this.player.currentTime += 1e-6;
      this.player.resume();
      return this.playing = true;
    }

    stop() {
      this.player.stop();
      this.fretboard.release_all();
      return this.playing = false;
    }

    pause() {
      this.player.pause();
      return this.playing = false;
    }

    getEndTime() {
      return this.player.endTime;
    }

    setCurrentTime(currentTime) {
      this.player.pause();
      this.player.currentTime = currentTime;
      if (this.playing) {
        return this.player.resume();
      }
    }

    setProgress(progress) {
      var currentTime;
      currentTime = this.player.endTime * progress;
      return this.setCurrentTime(currentTime);
    }

    setProgressFrom(delta) {
      var currentTime;
      this.fretboard.release_all();
      currentTime = this.player.currentTime + delta;
      return this.setCurrentTime(currentTime);
    }

    on(eventName, callback) {
      return this[`on${eventName}`] = callback;
    }

  };

  this.Gloom = Gloom;

}).call(this);
